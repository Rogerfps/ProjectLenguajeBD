CREATE TABLE USUARIO (
    ID_USUARIO NUMBER,
    USERNAME VARCHAR2(50),
    PASSWORD VARCHAR2(50),
    NOMBRE VARCHAR2(50),
    APELLIDOS VARCHAR2(50),
    CORREO VARCHAR2(100),
    TELEFONO VARCHAR2(20),
    RUTA_IMAGEN VARCHAR2(255),
    ACTIVO VARCHAR2(10),
    CONSTRAINT usuario_pk PRIMARY KEY (ID_USUARIO)
);

CREATE TABLE CATEGORIA (
    ID_CATEGORIA NUMBER,
    DESCRIPCION VARCHAR2(100),
    DISPONIBLE VARCHAR2(10),
    RUTA_IMAGEN VARCHAR2(255),
    CONSTRAINT categoria_pk PRIMARY KEY (ID_CATEGORIA)
);

CREATE TABLE SEDE (
    ID_SEDE NUMBER,
    NOMBRE_SEDE VARCHAR2(100),
    DIRECCION VARCHAR2(255),
    CONSTRAINT SEDE_pk PRIMARY KEY (ID_SEDE)
);

CREATE TABLE MESA (
    ID_MESA NUMBER,
    NOMBRE_MESA VARCHAR2(50),
    NUM_ESPACIOS NUMBER,
    ID_RESERVACION NUMBER,
    CONSTRAINT mesa_pk PRIMARY KEY (ID_MESA)
);

CREATE TABLE RESERVACION (
    ID_RESERVACION NUMBER,
    NOMBRE VARCHAR2(50),
    HORA DATE,
    ID_MESA NUMBER,
    CONTACTO VARCHAR2(50),
    ID_SEDE NUMBER,
    CONSTRAINT reservacion_pk PRIMARY KEY (ID_RESERVACION)
);

CREATE TABLE PLATO (
    ID_PLATO NUMBER,
    ID_CATEGORIA NUMBER,
    NOMBRE_PLATO VARCHAR(30),
    DETALLE VARCHAR2(255),
    PRECIO NUMBER,
    EXISTENCIAS NUMBER,
    RUTA_IMAGEN VARCHAR2(255),
    DISPONIBLE VARCHAR2(10),
    CONSTRAINT plato_pk PRIMARY KEY (ID_PLATO)
);

CREATE TABLE FACTURA (
    ID_FACTURA NUMBER,
    ID_USUARIO NUMBER,
    FECHA DATE,
    TOTAL NUMBER,
    ESTADO VARCHAR2(20),
    CONSTRAINT factura_pk PRIMARY KEY (ID_FACTURA)
);

CREATE TABLE VENTA (
    ID_VENTA NUMBER,
    ID_FACTURA NUMBER,
    ID_PLATO NUMBER,
    CANTIDAD NUMBER,
    CONSTRAINT venta_pk PRIMARY KEY (ID_VENTA)
);

CREATE TABLE ROL (
    ID_ROL NUMBER,
    NOMBRE VARCHAR2(50),
    ID_USUARIO NUMBER,
    CONSTRAINT rol_pk PRIMARY KEY (ID_ROL)
);

CREATE TABLE DIRECCION (
    ID_DIRECCION NUMBER,
    NOMBRE_DIRECCION VARCHAR2(100),
    COORDENADAS VARCHAR2(50),
    DESCRIPCION_DIRECCION VARCHAR2(255),
    CONSTRAINT direccion_pk PRIMARY KEY (ID_DIRECCION)
);

ALTER TABLE MESA ADD CONSTRAINT mesa_fk_reservacion FOREIGN KEY (ID_RESERVACION) REFERENCES RESERVACION(ID_RESERVACION);
ALTER TABLE RESERVACION ADD CONSTRAINT reservacion_fk_mesa FOREIGN KEY (ID_MESA) REFERENCES MESA(ID_MESA);
ALTER TABLE RESERVACION ADD CONSTRAINT reservacion_fk_SEDE FOREIGN KEY (ID_SEDE) REFERENCES SEDE(ID_SEDE);
ALTER TABLE PLATO ADD CONSTRAINT plato_fk_categoria FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA(ID_CATEGORIA);
ALTER TABLE FACTURA ADD CONSTRAINT factura_fk_usuario FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO);
ALTER TABLE VENTA ADD CONSTRAINT venta_fk_factura FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID_FACTURA);
ALTER TABLE VENTA ADD CONSTRAINT venta_fk_plato FOREIGN KEY (ID_PLATO) REFERENCES PLATO(ID_PLATO);
ALTER TABLE ROL ADD CONSTRAINT rol_fk_usuario FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO);

INSERT INTO MESA (ID_MESA, NOMBRE_MESA, NUM_ESPACIOS, ID_RESERVACION) VALUES (1, 'Mesa 1', 4, NULL);
INSERT INTO MESA (ID_MESA, NOMBRE_MESA, NUM_ESPACIOS, ID_RESERVACION) VALUES (2, 'Mesa 2', 6, NULL);

INSERT INTO USUARIO (ID_USUARIO, USERNAME, PASSWORD, NOMBRE, APELLIDOS, CORREO, TELEFONO, RUTA_IMAGEN, ACTIVO) 
VALUES (1, 'jdoe', 'password123', 'John', 'Doe', 'jdoe@example.com', '1234567890', 'ruta1.jpg', 'Activo');
INSERT INTO USUARIO (ID_USUARIO, USERNAME, PASSWORD, NOMBRE, APELLIDOS, CORREO, TELEFONO, RUTA_IMAGEN, ACTIVO) 
VALUES (2, 'asmith', 'password456', 'Alice', 'Smith', 'asmith@example.com', '0987654321', 'ruta2.jpg', 'Activo');

INSERT INTO ROL (ID_ROL, NOMBRE, ID_USUARIO) VALUES (1, 'Admin', 1);
INSERT INTO ROL (ID_ROL, NOMBRE, ID_USUARIO) VALUES (2, 'User', 2);

INSERT INTO CATEGORIA (ID_CATEGORIA, DESCRIPCION, DISPONIBLE, RUTA_IMAGEN) VALUES (1, 'Entrantes', 'SI', 'ruta1.jpg');
INSERT INTO CATEGORIA (ID_CATEGORIA, DESCRIPCION, DISPONIBLE, RUTA_IMAGEN) VALUES (2, 'Principales', 'SI', 'ruta2.jpg');

INSERT INTO PLATO (ID_PLATO, ID_CATEGORIA, NOMBRE_PLATO, DETALLE, PRECIO, EXISTENCIAS, RUTA_IMAGEN, DISPONIBLE) 
VALUES (1, 1, 'Ensalada', 'Ensalada mixta', 5.00, 10, 'ruta1.jpg', 'SI');
INSERT INTO PLATO (ID_PLATO, ID_CATEGORIA, NOMBRE_PLATO, DETALLE, PRECIO, EXISTENCIAS, RUTA_IMAGEN, DISPONIBLE) 
VALUES (2, 2, 'Pollo Asado', 'Pollo asado con guarnición', 10.00, 5, 'ruta2.jpg', 'SI');

INSERT INTO SEDE (ID_SEDE, NOMBRE_SEDE, DIRECCION) VALUES (1, 'Sede Central', 'Dirección 1');
INSERT INTO SEDE (ID_SEDE, NOMBRE_SEDE, DIRECCION) VALUES (2, 'Sede Norte', 'Dirección 2');

INSERT INTO RESERVACION (ID_RESERVACION, NOMBRE, HORA, ID_MESA, CONTACTO, ID_SEDE) VALUES (1, 'Reserva 1', TO_DATE('2024-07-18 20:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 'contacto1', 1);
INSERT INTO RESERVACION (ID_RESERVACION, NOMBRE, HORA, ID_MESA, CONTACTO, ID_SEDE) VALUES (2, 'Reserva 2', TO_DATE('2024-07-19 18:00:00', 'YYYY-MM-DD HH24:MI:SS'), 2, 'contacto2', 2);

INSERT INTO FACTURA (ID_FACTURA, ID_USUARIO, FECHA, TOTAL, ESTADO) VALUES (1, 1, TO_DATE('2024-07-18', 'YYYY-MM-DD'), 15.00, 'Pagada');
INSERT INTO FACTURA (ID_FACTURA, ID_USUARIO, FECHA, TOTAL, ESTADO) VALUES (2, 2, TO_DATE('2024-07-19', 'YYYY-MM-DD'), 20.00, 'Pendiente');

INSERT INTO VENTA (ID_VENTA, ID_FACTURA, ID_PLATO, CANTIDAD) VALUES (1, 1, 1, 1);
INSERT INTO VENTA (ID_VENTA, ID_FACTURA, ID_PLATO, CANTIDAD) VALUES (2, 2, 2, 2);


-- 1. Procedimiento para obtener los platos disponibles
CREATE OR REPLACE PROCEDURE OBTENER_PLATOS_DISPONIBLES 
AS
BEGIN
	FOR platos_disponibles IN (SELECT NOMBRE_PLATO FROM PLATO WHERE DISPONIBLE = 'SI') LOOP
        DBMS_OUTPUT.PUT_LINE('Plato: ' || platos_disponibles.NOMBRE_PLATO);
	END LOOP; 
END;

EXEC OBTENER_PLATOS_DISPONIBLES;


-- 2. Procedimiento para calcular el total de una factura
CREATE OR REPLACE PROCEDURE CALCULAR_TOTAL_FACTURA (
    id_factura IN NUMBER
)
AS
	total NUMBER;
	id_plato PLATO.ID_PLATO%TYPE;
	precio_plato PLATO.PRECIO%TYPE;
BEGIN
    SELECT ID_PLATO INTO id_plato FROM VENTA WHERE ID_FACTURA= id_factura;
    SELECT PRECIO INTO precio_plato FROM PLATO WHERE ID_PLATO= id_plato;

    SELECT SUM(precio_plato * CANTIDAD)
    INTO total
    FROM VENTA
    WHERE ID_FACTURA = id_factura;

	DBMS_OUTPUT.PUT_LINE('Total: $' || total);
END;

EXEC CALCULAR_TOTAL_FACTURA(2);


--3. Procedimiento para obtener facturas por usuario
CREATE OR REPLACE PROCEDURE OBTENER_FACTURAS_POR_USUARIO (
    id_usuario IN USUARIO.ID_USUARIO%TYPE
) AS
BEGIN
	FOR facturas_usuario IN (SELECT * FROM FACTURA WHERE ID_USUARIO = id_usuario) LOOP
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Id factura: ' || facturas_usuario.ID_FACTURA);
        DBMS_OUTPUT.PUT_LINE('Id del usuario: ' || facturas_usuario.ID_USUARIO);
        DBMS_OUTPUT.PUT_LINE('Fecha de registro: ' || facturas_usuario.FECHA);
        DBMS_OUTPUT.PUT_LINE('Estado factura: ' || facturas_usuario.ESTADO);
        DBMS_OUTPUT.PUT_LINE('Total: $' || facturas_usuario.TOTAL);
		DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
	END LOOP; 
END;

EXEC OBTENER_FACTURAS_POR_USUARIO(1);


--4. Procedimiento para obtener reservaciones por sede
CREATE OR REPLACE PROCEDURE OBTENER_RESERVACIONES_POR_SEDE (
    id_sede IN NUMBER
) AS
    nombre_sede VARCHAR(20);
BEGIN
    SELECT NOMBRE_SEDE INTO nombre_sede FROM SEDE WHERE ID_SEDE=id_sede;

	FOR reservaciones_sede IN (SELECT * FROM RESERVACION WHERE ID_SEDE = id_sede) LOOP
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Id reservacion: ' || reservaciones_sede.ID_RESERVACION);
        DBMS_OUTPUT.PUT_LINE('Sede: ' || nombre_sede);
        DBMS_OUTPUT.PUT_LINE('A nombre de: ' || reservaciones_sede.NOMBRE);
        DBMS_OUTPUT.PUT_LINE('Hora: ' || reservaciones_sede.HORA);
        DBMS_OUTPUT.PUT_LINE('Mesa reservada: ' || reservaciones_sede.ID_MESA);
        DBMS_OUTPUT.PUT_LINE('Contacto del cliente' || reservaciones_sede.CONTACTO);
		DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
	END LOOP; 
END;

EXEC OBTENER_RESERVACIONES_POR_SEDE(1);

--5. Procedimiento para obtener ventas por plato
CREATE OR REPLACE PROCEDURE OBTENER_VENTAS_POR_PLATO (
    id_plato IN NUMBER
) AS
    nombre_plato PLATO.NOMBRE_PLATO%TYPE;
BEGIN
	SELECT NOMBRE_PLATO INTO nombre_plato FROM PLATO WHERE ID_PLATO= id_plato;
    
    FOR ventas_platos IN (SELECT * FROM VENTA WHERE ID_PLATO = id_plato) LOOP
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Id venta: ' || ventas_platos.ID_VENTA);
        DBMS_OUTPUT.PUT_LINE('Factura de venta: ' || ventas_platos.ID_FACTURA);
        DBMS_OUTPUT.PUT_LINE('Plato: ' || nombre_plato);
        DBMS_OUTPUT.PUT_LINE('Cantidad: ' || ventas_platos.CANTIDAD);
		DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
	END LOOP; 
END;

EXEC OBTENER_VENTAS_POR_PLATO(1);


--6. Procedimiento para calcular los ingresos por sede
CREATE OR REPLACE PROCEDURE CALCULAR_INGRESOS_POR_SEDE (
    id_sede IN NUMBER
) AS
    total_ingresos NUMBER;
	nombre_sede SEDE.NOMBRE_SEDE%TYPE;
BEGIN
	SELECT NOMBRE_SEDE INTO nombre_sede FROM SEDE WHERE ID_SEDE = 1;
    
    SELECT SUM(f.TOTAL)
    INTO total_ingresos
    FROM FACTURA f
    JOIN RESERVACION r ON f.ID_FACTURA = r.ID_RESERVACION
    WHERE r.ID_SEDE = 1;

    DBMS_OUTPUT.PUT_LINE('Total de ingresos en la sede "' || nombre_sede || '": $' || total_ingresos);
END;

EXEC CALCULAR_INGRESOS_POR_SEDE(1);
